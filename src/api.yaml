openapi: 3.0.0
info:
  title: 'Melinda REST API for ILS integration '
  version: '2.2'
tags:
  - name: /
    description: Operate on single bibliographic records
  - name: /bulk/
    description: >-
      Operate on bibliographic records in bulk format. Also admin operations for
      operatiing on bib records in bulk format.
  - name: /prio/
    description: Admin operations for operating on single bibliographic records
  - name: /logs/
    description: Operate on logs for jobs
paths:
  /:
    post:
      summary: Create a record
      tags:
        - /
      parameters:
        - name: noop
          description: Do not create the record
          in: query
          schema:
            type: boolean
            default: false
        - name: unique
          description: Do not create the record if there are duplicates in the datastore
          in: query
          schema:
            type: boolean
            default: true
        - name: merge
          description: >-
            Merge incoming record to datastore record if a duplicate record is
            found
          in: query
          schema:
            type: boolean
            default: false
        - name: skipNoChangeUpdates
          description: >-
            Do not update the datastore record if update would result in no
            changes
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: Contains a single record
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marcRecord'
          application/xml:
            schema:
              type: string
            example:
              $ref: '#/components/examples/MARCXML'
          application/marc:
            schema:
              type: string
              format: binary
            example:
              $ref: '#/components/examples/ISO2709'
      security:
        - httpBasic: []
      responses:
        '200':
          description: >-
            The record was okay, but was not actually created in the database,
            because   <li> parameter **noop** was set to true, or  <li>
            parameters **merge** and **skipNoChangeUpdates** were set to true
            and  the merged update would have resulted in no changes in the
            datastore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordResponseItemFor200Create'
        '201':
          description: The record was created succesfully
          headers:
            Record-ID:
              description: Identifier for the created record in the datastore
              schema:
                $ref: '#/components/schemas/databaseIdNonEmpty'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordResponseItemFor201Create'
        '400':
          description: >-
            The record data is malformed or has missmach content-type, or the
            query parameters are invalid
        '401':
          description: Credentials are invalid or missing
        '403':
          description: >-
            The credentials are not authorized for this operation, i.e. the user
            does not have the permission to change the owner metadata of the
            record
        '408':
          description: The request has timed out
        '409':
          description: >-
            There is conflict that prevents creating/updating the record to the
            datastore. Either the record has a duplicate in the datastore or
            there too many possible duplicates in the datastore (and **unique**
            was set to true) while creating a record -  or the request contains
            outdated data while updating the record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordResponseItemFor409Create'
        '415':
          description: The request is in a format that is not supported
        '422':
          description: The record does not pass validation, or is not parseable
  /{id}:
    post:
      summary: Update a record
      tags:
        - /
      parameters:
        - name: id
          description: The identifier of the record that's going to be updated
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/databaseIdNonEmpty'
        - name: noop
          description: Do not actually do the update the record.
          in: query
          schema:
            type: boolean
            default: false
        - name: merge
          description: Update the datastore record by merging the incoming record to it
          in: query
          schema:
            type: boolean
            default: false
        - name: skipNoChangeUpdates
          description: >-
            Do not update the datastore record if update would result in no
            changes
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: Contains a single record
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marcRecord'
          application/xml:
            schema:
              type: string
            example:
              $ref: '#/components/examples/MARCXML'
          application/marc:
            schema:
              type: string
              format: binary
            example:
              $ref: '#/components/examples/ISO2709'
      security:
        - httpBasic: []
      responses:
        '200':
          description: >-
            The record was succesfully updated. (Unless parameter **noop** was
            set to true, or parameter **skipNoChangeUpdate** was set to true and
            the update would have resulted in no changes in the datastore
            record.)
          headers:
            Record-ID:
              description: Identifier for the updated record in the datastore
              schema:
                $ref: '#/components/schemas/databaseIdNonEmpty'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordResponseItemFor200Update'
        '400':
          description: >-
            The request id invalid or the record data is malformed or has
            missmach content-type, or the parameters are invalid
        '401':
          description: Credentials are invalid or missing
        '403':
          description: >-
            The credentials are not authorized for this operation, i.e. the user
            does not have the permission to change the owner metadata of the
            record
        '404':
          description: The record does not exist
        '408':
          description: The request has timed out
        '409':
          description: The request contains out of date record data
        '415':
          description: The request is in a format that is not supported
        '422':
          description: The record does not pass validation
    get:
      summary: Retrieve a record
      tags:
        - /
      parameters:
        - name: id
          description: >-
            The identifier of the record that's going to be retrieved. Pad with
            zeroes to nine numbers.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/databaseIdNonEmpty'
      security:
        - httpBasic: []
      responses:
        '200':
          description: Retrieved a record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marcRecord'
            application/xml:
              schema:
                type: string
              example:
                $ref: '#/components/examples/MARCXML'
            application/marc:
              schema:
                type: string
                format: binary
              example:
                $ref: '#/components/examples/ISO2709'
          headers:
            Record-ID:
              description: Identifier of the retrieved record
              schema:
                $ref: '#/components/schemas/databaseId'
        '400':
          description: Requested id is invalid
        '401':
          description: Credentials are invalid or missing
        '403':
          description: The credentials are not authorized for this operation
        '404':
          description: The record does not exist
        '415':
          description: The request asks format that is not supported
  /bulk/:
    post:
      summary: Create a bulk job for operating on several records
      tags:
        - /bulk/
      parameters:
        - name: pActiveLibrary
          description: Aleph active library
          in: query
          required: true
          schema:
            type: string
        - name: pOldNew
          description: Operation type
          in: query
          required: true
          schema:
            type: string
            enum:
              - OLD
              - NEW
        - name: noStream
          description: Start bulk job as noStream/batch bulk job and wait for records
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: noop
          description: Do not create/update the record
          in: query
          schema:
            type: boolean
            default: false
        - name: unique
          description: Do not create the record if there are duplicates in the datastore
          in: query
          schema:
            type: boolean
            default: true
        - name: merge
          description: >-
            Merge incoming record to datastore record if a duplicate record is
            found
          in: query
          schema:
            type: boolean
            default: false
        - name: skipNoChangeUpdates
          description: >-
            Do not update the datastore record if update would result in no
            changes
          in: query
          schema:
            type: boolean
            default: false
        - name: pRejectFile
          description: Error log file location
          in: query
          schema:
            type: string
            default: null
        - name: pLogFile
          description: Results log file location
          in: query
          schema:
            type: string
            default: null
      requestBody:
        description: Contains an array of records, required for stream-type bulk jobs
        required: true
        content:
          application/json:
            schema:
              type: string
            example:
              $ref: '#/components/schemas/marcRecord'
          application/xml:
            schema:
              type: string
            example:
              $ref: '#/components/examples/MARCXML'
          application/marc:
            schema:
              type: string
              format: binary
            example:
              $ref: '#/components/examples/ISO2709'
          application/alephseq:
            schema:
              type: string
            example:
              $ref: '#/components/examples/Alephseq'
      security:
        - httpBasic: []
      responses:
        '200':
          description: Returns created bulk queue item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dbQueueItem-bulk'
        '400':
          description: The record data is malformed or has unsupported format
        '401':
          description: Credentials are invalid or missing
        '403':
          description: >-
            The credentials are not authorized for this operation, i.e. the user
            does not have the permission to change the owner metadata of the
            record
        '409':
          description: >-
            There is conflict that prevents creating/updating the record to the
            datastore. Either the record has a duplicate in the datastore or
            there too many possible duplicates in the datastore (and **unique**
            was set to true) while creating a record -  or the request contains
            outdated data while updating the record
        '422':
          description: The record does not pass validation
    get:
      summary: Retrieve queue items
      tags:
        - /bulk/
      parameters:
        - name: id
          description: Queue item identifier (correlationId) for job
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/correlationId'
      security:
        - httpBasic: []
      responses:
        '200':
          description: >-
            Array of queue item objects (See
            #/components/schemas/dbQueueItem-bulk). Empty list if no resources
            were found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dbQueueItem-bulk'
        '401':
          description: Credentials are invalid or missing
        '403':
          description: The credentials are not authorized for this operation
        '404':
          description: The record does not exist
    delete:
      summary: Remove queue item
      tags:
        - /bulk/
      parameters:
        - name: id
          description: Queue item identifier (correlationId)
          in: query
          required: true
          schema:
            type: string
      security:
        - httpBasic: []
      responses:
        '200':
          description: Queue item removal report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queueItemRemoveResponse'
        '401':
          description: Credentials are invalid or missing
        '403':
          description: The credentials are not authorized for this operation
        '404':
          description: The record does not exist
  /bulk/record/{id}:
    parameters:
      - name: id
        description: Queue item identifier (correlationId)
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/correlationId'
    put:
      summary: Add a record to a bulk job
      tags:
        - /bulk/
      security:
        - httpBasic: []
      responses:
        '200':
          description: OK
  /bulk/state/{id}:
    parameters:
      - name: id
        description: Queue item identifier (correlationId)
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/correlationId'
    get:
      summary: Retrieve current state of a job
      tags:
        - /bulk/
      security:
        - httpBasic: []
      responses:
        '200':
          description: OK
    put:
      summary: Update state of a job
      tags:
        - /bulk/
      security:
        - httpBasic: []
      responses:
        '200':
          description: OK
  /bulk/content/{id}:
    parameters:
      - name: id
        description: Queue item identifier (correlationId)
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/correlationId'
    get:
      summary: Retrieve queue item content
      tags:
        - /bulk/
      security:
        - httpBasic: []
      responses:
        '200':
          description: Queue item content
        '401':
          description: Credentials are invalid or missing
        '403':
          description: The credentials are not authorized for this operation
        '404':
          description: Queue item does not exist
    delete:
      summary: Remove queue item content
      tags:
        - /bulk/
      security:
        - httpBasic: []
      responses:
        '204':
          description: Queue item content removed
        '401':
          description: Credentials are invalid or missing
        '403':
          description: The credentials are not authorized for this operation
        '404':
          description: Queue item does not exist
  /prio/:
    get:
      summary: Retrieve prio queue items
      tags:
        - /prio/
      parameters:
        - name: id
          description: Queue item identifier (correlationId)
          in: query
          required: false
          schema:
            type: string
      security:
        - httpBasic: []
      responses:
        '200':
          description: >-
            Array of queue item objects (See
            #/components/schemas/dbQueueItem-prio). Empty list if no resources
            were found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dbQueueItem-prio'
        '401':
          description: Credentials are invalid or missing
        '403':
          description: The credentials are not authorized for this operation
        '404':
          description: The record does not exist
  /logs:
    get:
      summary: Query job logs
      tags:
        - /logs/
      parameters:
        - name: correlationId
          description: Queue item identifier (correlationId) for job
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/correlationId'
        - name: blobSequence
          in: query
          required: false
          schema:
            type: integer
        - name: logItemType
          in: query
          required: false
          schema:
            allOf:
              - default: MERGE_LOG
              - $ref: '#/components/schemas/logItemType'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 5
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
      security:
        - httpBasic: []
      responses:
        '200':
          description: Array of JobLogItems, or empty array if not logItems are found.
  /logs/list:
    get:
      summary: >-
        Get list of correlationIds (or expanded info) for jobs that have logs available.
        Note that logItemType defaults to MERGE_LOG, if its not given as a parameter.
        Note that most other query parameters are only usable with expanded = true.
        Note that expanded is not currently usable with LOAD_PROCESS_REPORT or
        SPLITTER_LOG logItemType.
      tags:
        - /logs/
      parameters:
        - name: logItemType
          in: query
          schema:
            allOf:
              - default: MERGE_LOG
              - $ref: '#/components/schemas/logItemType'
        - name: expanded
          description: Get expanded info on jobs that have logs instead just correlationIds
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: logItemTypes
          description: Comma-separated list of logItemTypes (see '#/components/schemas/logItemType')
          example: 'INPUT_RECORD_LOG,MATCH_LOG'
          in: query
          schema:
            type: string
        - name: catalogers
          description: Comma-separated list of catalogers
          example: 'TEST1234,FOOBA0000,ZOO-TEST'
          in: query
          required: false
          schema:
            type: string
        - name: creationTime
          description: >-
            String array of one or two YYYY-MM-YY-formatted timestamps.
            First date is dateAfter, second is dateBefore for
            filtering logs by creationTime.
          example: '["2023-12-01","2023-12-31"]'
          in: query
          required: false
          schema:
            type: string
      security:
        - httpBasic: []
      responses:
        '200':
          description: Array of correlationIds or expanded info on jobs that have logs available
  /logs/catalogers:
    get:
      summary: List catalogers that have triggered jobs that have logs available
      tags:
        - /logs/
      security:
        - httpBasic: []
      responses:
        '200':
          description: Array of catalogers that have triggered jobs that have logs available
  /logs/correlationIds:
    get:
      summary: List correlationIds that have logs available
      tags:
        - /logs/
      security:
        - httpBasic: []
      responses:
        '200':
          description: Array of correlationIds that have logs available

  /logs/{id}:
    parameters:
      - name: id
        description: correlationId for a job
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/jobLogId'
    get:
      summary: Retrieve one MERGE_LOG -type of logItem for a job
      tags:
        - /logs/
      responses:
        '200':
          description: A job log item
      security:
        - httpBasic: []
    put:
      summary: Protect/unprotect a job's / a job's blobSequence's logs
      tags:
        - /logs/
      parameters:
        - name: blobSequence
          in: query
          required: false
          schema:
            type: integer
      security:
        - httpBasic: []
      responses:
        '200':
          description: Mongo response object for update
    delete:
      summary: Delete a job's logs
      tags:
        - /logs/
      parameters:
      - name: force
        description: Force deletion of protected logs
        in: query
        required: false
        schema:
          type: boolean
          default: false
      security:
        - httpBasic: []
      responses:
        '200':
          description: Mongo response object for deletion
components:
  securitySchemes:
    httpBasic:
      type: http
      scheme: basic
  schemas:
    logItemType:
      type: string
      enum:
        - MERGE_LOG
        - MATCH_LOG
        - LOAD_PROCESS_LOG
        - SPLITTER_LOG
        - INPUT_RECORD_LOG
        - RESULT_RECORD_LOG
    jobLogId:
      description: Id for a job log (uuid)
      type: string
    correlationId:
      description: CorrelationId of a job / queueItem (uuid)
      type: string
    recordResponseItemFor200Create:
      type: object
      properties:
        databaseId:
          $ref: '#/components/schemas/databaseIdEmpty'
        recordMetadata:
          $ref: '#/components/schemas/recordMetadata'
        recordStatus:
          allOf:
            - example: CREATED
            - $ref: '#/components/schemas/recordStatus'
        detailedRecordStatus:
          allOf:
            - example: CREATED
            - $ref: '#/components/schemas/detailedRecordStatus'
        message:
          type: string
          example: Would create a new record. - Noop.
    recordResponseItemFor200Update:
      type: object
      properties:
        databaseId:
          $ref: '#/components/schemas/databaseIdNonEmpty'
        recordMetadata:
          $ref: '#/components/schemas/recordMetadata'
        recordStatus:
          allOf:
            - example: UPDATED
            - $ref: '#/components/schemas/recordStatus'
        detailedRecordStatus:
          allOf:
            - example: UPDATED
            - $ref: '#/components/schemas/detailedRecordStatus'
        message:
          type: string
          example: Updated record 000123456
    recordResponseItemFor201Create:
      type: object
      properties:
        databaseId:
          $ref: '#/components/schemas/databaseIdNonEmpty'
        recordMetadata:
          $ref: '#/components/schemas/recordMetadata'
        recordStatus:
          allOf:
            - example: CREATED
            - $ref: '#/components/schemas/recordStatus'
        detailedRecordStatus:
          allOf:
            - example: CREATED
            - $ref: '#/components/schemas/detailedRecordStatus'
        message:
          type: string
          example: Created record 000123456.
    recordResponseItemFor409Create:
      type: object
      properties:
        databaseId:
          $ref: '#/components/schemas/databaseIdEmpty'
        recordMetadata:
          $ref: '#/components/schemas/recordMetadata'
        recordStatus:
          allOf:
            - enum:
                - DUPLICATE
            - $ref: '#/components/schemas/recordStatus'
        detailedRecordStatus:
          allOf:
            - enum:
                - DUPLICATE
            - $ref: '#/components/schemas/detailedRecordStatus'
        message:
          type: string
          example: Duplicates in database.
        ids:
          $ref: '#/components/schemas/recordResponseItemIds'
    databaseIdEmpty:
      allOf:
        - enum:
            - '000000000'
        - $ref: '#/components/schemas/databaseId'
    databaseIdNonEmpty:
      allOf:
        - example: '000123456'
        - $ref: '#/components/schemas/databaseId'
    databaseId:
      type: string
      description: ID for a record in the datastore in nine-digit format
      pattern: ^\d{9}$
    recordStatus:
      description: Status for the handled record after the operation.
      type: string
      enum:
        - UPDATED
        - CREATED
        - SKIPPED
        - DUPLICATE
        - ERROR
        - INVALID
    detailedRecordStatus:
      description: More detailed status for handled record after the operation.
      type: string
      enum:
        - UPDATED
        - CREATED
        - SKIPPED
        - DUPLICATE
        - ERROR
        - INVALID
        - CONLICT
        - UNKNOWN
        - NOT_FOUND
    recordResponseItem:
      type: object
      required:
        - databaseId
        - recordMetadata
        - recordStatus
        - detailedRecordStatus
        - message
      properties:
        databaseId:
          $ref: '#/components/schemas/databaseIdNonEmpty'
        recordMetadata:
          $ref: '#/components/schemas/recordMetadata'
        recordStatus:
          $ref: '#/components/schemas/recordStatus'
        detailedRecordStatus:
          $ref: '#/components/schemas/detailedRecordStatus'
        message:
          description: >-
            Explanation for the recordStatus after the operation including
            possible error messages.
          type: string
        ids:
          allOf:
            - description: IDs for related records in the datastore
            - $ref: '#/components/schemas/recordResponseItemIds'
    recordResponseItemIds:
      type: array
      items:
        $ref: '#/components/schemas/databaseIdNonEmpty'
    recordMetadata:
      description: Metadata extracted from the input record
      type: object
      properties:
        sourceIds:
          description: Record identifiers
          type: array
          items:
            type: string
            example: (FI-FOOBAR)123456
        title:
          description: Title for described resource
          type: string
          example: 'Hobitti :'
        standardIdentifiers:
          description: 'Standard identifiers for described resource: ISBNs, ISSNs etc.'
          type: array
          items:
            type: string
            example: 978-951-0-46873-9
        blobSequence:
          description: >-
            Sequence for the record in the input blob. Always "1" when handling
            single record input
          type: number
          example: 1
          pattern: ^\d+$
    queueItemRemoveResponse:
      type: object
      properties:
        request:
          type: object
          properties:
            id:
              type: string
        result:
          type: boolean
      example:
        request:
          id: 00000000-0000-0000-0000-00000000000
        result: 'true'
    marcRecord:
      type: object
      required:
        - leader
        - fields
      properties:
        leader:
          type: string
        fields:
          type: array
          items:
            oneOf:
              - type: object
                required:
                  - tag
                  - value
                properties:
                  tag:
                    type: string
                  value:
                    type: string
              - type: object
                required:
                  - tag
                  - subfields
                properties:
                  tag:
                    type: string
                  subfields:
                    type: array
                    items:
                      type: object
                      required:
                        - code
                        - value
                      properties:
                        code:
                          type: string
                        value:
                          type: string
      example:
        leader: ''
        fields:
          - tag: '001'
            value: '000000001'
          - tag: '100'
            ind1: ' '
            Ind2: ' '
            subfields:
              - code: a
                value: foo, faa
    queueItemState:
      type: string
      description: The request queue item state
      enum:
        - DONE
        - ERROR
        - IMPORTER.IN_PROCESS
        - IMPORTER.IN_QUEUE
        - IMPORTER.IMPORTING
        - VALIDATOR.PENDING_QUEUING
        - VALIDATOR.QUEUING_IN_PROGRESS
        - VALIDATOR.UPLOADING
        - VALIDATOR.PENDING_VALIDATION
        - VALIDATOR.VALIDATING
    dbQueueItem-bulk:
      type: object
      properties:
        correlationId:
          type: string
          description: The identifier of the queue item
        cataloger:
          type: string
          description: The identifier of cataloger
        oCatalogerIn:
          type: string
          description: The identifier of cataloger used in actually saving the record
        operation:
          type: string
          description: The request operation type
          enum:
            - CREATE
            - UPDATE
        operationSettings:
          type: object
          properties:
            prio:
              type: boolean
              description: The operation is a prio operation
        contentType:
          type: string
          description: Input stream mime type
          enum:
            - application/alephseq
            - application/json
            - application/xml
            - application/marc
        queueItemState:
          $ref: '#/components/schemas/queueItemState'
        creationTime:
          type: string
          description: The request creation time
        modificationTime:
          type: string
          description: Last modification time of the request
        handledIds:
          type: array
          items:
            type: string
            description: Handled record id
        rejectedIds:
          type: array
          items:
            type: string
            description: Rejected record id
        errorStatus:
          type: string
          description: httpError status for an errrored job
        errorMessages:
          type: string
          description: Error message for an errrored job
        loadProcessReports:
          description: Array of load process reports for job.
          type: array
          items:
            description: >-
              A load process report. As default only kept for those processes
              that didn't handle all the records as expected
            type: object
            properties:
              status:
                type: string
                description: Http status from load process
              processId:
                type: string
                description: Process id of the load process
              processedAll:
                type: boolean
                description: Did load process process all the records
              recordAmount:
                type: number
                description: Number of records given to the load process
              processedAmount:
                type: number
                description: >-
                  Number of records processed (handled or rejected) by the load
                  process
              handledAmount:
                type: number
                description: >-
                  Number of records handled (updated or created) by the load
                  process
              rejectedAmount:
                type: number
                description: Number of records rejected by the load process
              rejectMessages:
                type: array
                description: >-
                  Reject messages given by the load process for the rejected
                  records
                items:
                  type: string
                  description: >-
                    A reject message given by the load process for a single
                    rejected record
    dbQueueItem-prio:
      type: object
      properties:
        correlationId:
          type: string
          description: The identifier of the queue item
        cataloger:
          type: string
          description: The identifier of cataloger
        oCatalogerIn:
          type: string
          description: The identifier of cataloger used in actually saving the record
        operation:
          type: string
          description: The request operation type
          enum:
            - CREATE
            - UPDATE
        operationSettings:
          type: object
          properties:
            prio:
              type: boolean
              description: The operation is a prio operation
            unique:
              type: boolean
              description: >-
                Is the create operation a unique operation. If true, it does not
                create the record if there are duplicates in the datastore.
            noop:
              type: boolean
              description: >-
                Is the operation a noop operation. If true it will not not
                actually create or update the record in the datastore.
        queueItemState:
          $ref: '#/components/schemas/queueItemState'
        creationTime:
          type: string
          description: The request creation time
        modificationTime:
          type: string
          description: Last modification time of the request
        handledIds:
          type: array
          items:
            type: string
            description: Handled record id
        rejectedIds:
          type: array
          items:
            type: string
            description: Rejected record id
        errorStatus:
          type: string
          description: httpError status for an errrored job
        errorMessages:
          type: string
          description: Error message for an errrored job
        loadProcessReports:
          description: Array of load process reports for job.
          type: array
          items:
            description: >-
              A load process report. As default only kept for those processes
              that didn't handle all the records as expected
            type: object
            properties:
              status:
                type: string
                description: Http status from load process
              processId:
                type: string
                description: Process id of the load process
              processedAll:
                type: boolean
                description: Did load process process all the records
              recordAmount:
                type: number
                description: Number of records given to the load process
              processedAmount:
                type: number
                description: >-
                  Number of records processed (handled or rejected) by the load
                  process
              handledAmount:
                type: number
                description: >-
                  Number of records handled (updated or created) by the load
                  process
              rejectedAmount:
                type: number
                description: Number of records rejected by the load process
              rejectMessages:
                type: array
                description: >-
                  Reject messages given by the load process for the rejected
                  records
                items:
                  type: string
                  description: >-
                    A reject message given by the load process for a single
                    rejected record
        noopValidationMessages:
          type: array
          description: >-
            An array of validation messages given by validation to the record in
            a noop operation
          items:
            type: object
  examples:
    MARCXML:
      value: >-
        <?xml version="1.0" encoding="UTF-8"?><record><leader>00000cam
        a22003494i 4500</leader><datafield tag="245" ind1="0" ind2=" "><subfield
        code="a">foo</subfield></datafield></record>
    ISO2709:
      externalValue: >-
        https://raw.githubusercontent.com/NatLibFi/melinda-rest-api/master/test-fixtures/conversion/iso2709_1
    Alephseq:
      value: |-
        000000001 FMT   L BK
        000000001 LDR   L ^^^^^xxx^x00000000x^0000
        000000001 001   L 000000001
        000000001 005   L 20090820094953.0
