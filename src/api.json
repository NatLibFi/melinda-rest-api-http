{
  "openapi": "3.0.0",
  "info": {
    "title": "Melinda REST API for ILS integration ",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "/v1/bib/",
      "description": "Operate on bibliographic records"
    },
    {
      "name": "/v1/bib/bulk/",
      "description": "Operate on bibliographic records in bulk format"
    }
  ],
  "paths": {
    "/v1/bib/": {
      "post": {
        "summary": "Create a record",
        "tags": [
          "/v1/bib/"
        ],
        "parameters": [
          {
            "name": "noop",
            "description": "Do not create the record",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "unique",
            "description": "Do not create the record if there are duplicates in the datastore",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "Contains a single record",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/marcRecord"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              },
              "example": {
                "$ref": "#/components/examples/MARCXML"
              }
            },
            "application/marc": {
              "schema": {
                "type": "string",
                "format": "binary"
              },
              "example": {
                "$ref": "#/components/examples/ISO2709"
              }
            }
          }
        },
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "200": {
            "description": "The record was not actually created (The parameter **noop** was set to true)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          },
          "201": {
            "description": "The record was created succesfully",
            "headers": {
              "Record-ID": {
                "description": "The Record's identifier",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          },
          "400": {
            "description": "The record data is malformed or has missmach content-type"
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation, i.e. the user does not have the permission to change the owner metadata of the record"
          },
          "408": {
            "description": "The request has timed out"
          },
          "409": {
            "description": "The record has a duplicate in the datastore and **unique** was set to true",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordDuplicateReport"
                }
              }
            }
          },
          "415": {
            "description": "The request is in a format that is not supported"
          },
          "422": {
            "description": "The record does not pass validation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bib/{id}": {
      "post": {
        "summary": "Update a record",
        "tags": [
          "/v1/bib/"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the record that's going to be updated",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noop",
            "description": "Do not actually do the update the record. Boolean value 1 or 0",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 0,
              "maximum": 1,
              "minimum": 0,
              "maxLength": 1
            }
          }
        ],
        "requestBody": {
          "description": "Contains a single record",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/marcRecord"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              },
              "example": {
                "$ref": "#/components/examples/MARCXML"
              }
            },
            "application/marc": {
              "schema": {
                "type": "string",
                "format": "binary"
              },
              "example": {
                "$ref": "#/components/examples/ISO2709"
              }
            }
          }
        },
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "200": {
            "description": "The record was succesfully updated (Unless parameter **noop** was set to true)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          },
          "400": {
            "description": "The request id invalid or the record data is malformed or has missmach content-type"
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation, i.e. the user does not have the permission to change the owner metadata of the record"
          },
          "404": {
            "description": "The record does not exist"
          },
          "408": {
            "description": "The request has timed out"
          },
          "409": {
            "description": "The request contains out of date record data"
          },
          "415": {
            "description": "The request is in a format that is not supported"
          },
          "422": {
            "description": "The record does not pass validation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a record",
        "tags": [
          "/v1/bib/"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The identifier of the record that's going to be retrieved",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "description": "Header param 'Accept' is used to rule response content-type",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/marcRecord"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                },
                "example": {
                  "$ref": "#/components/examples/MARCXML"
                }
              },
              "application/marc": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": {
                  "$ref": "#/components/examples/ISO2709"
                }
              }
            },
            "headers": {
              "Record-ID": {
                "description": "Identifier of the record",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Requested id is invalid"
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation"
          },
          "404": {
            "description": "The record does not exist"
          },
          "415": {
            "description": "The request asks format that is not supported"
          }
        }
      }
    },
    "/v1/bib/bulk/": {
      "post": {
        "summary": "Create bulk ",
        "tags": [
          "/v1/bib/bulk/"
        ],
        "parameters": [
          {
            "name": "pActiveLibrary",
            "description": "Aleph active library",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pOldNew",
            "description": "Operation type ",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pRejectFile",
            "description": "Error log file location",
            "in": "query",
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "pLogFile",
            "description": "Results log file location",
            "in": "query",
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "requestBody": {
          "description": "Contains an array of records",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/marcRecord"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              },
              "example": {
                "$ref": "#/components/examples/MARCXML"
              }
            },
            "application/marc": {
              "schema": {
                "type": "string",
                "format": "binary"
              },
              "example": {
                "$ref": "#/components/examples/ISO2709"
              }
            }
          }
        },
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "200": {
            "description": "The record was not actually created (The parameter **noop** was set to true)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          },
          "201": {
            "description": "The record was created succesfully",
            "headers": {
              "Record-ID": {
                "description": "The Record's identifier",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          },
          "400": {
            "description": "The record data is malformed or has unsupported format"
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation, i.e. the user does not have the permission to change the owner metadata of the record"
          },
          "409": {
            "description": "The record has a duplicate in the datastore and **unique** was set to true",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordDuplicateReport"
                }
              }
            }
          },
          "422": {
            "description": "The record does not pass validation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordValidationReport"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve queue items",
        "tags": [
          "/v1/bib/bulk/"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Queue item identifier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "200": {
            "description": "Array of queue item objects (See #/components/schemas/dbQueueItem-prio & #/components/schemas/dbQueueItem-bulk). Empty list if no resources were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/dbQueueItem-bulk"
              }
            }
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation"
          },
          "404": {
            "description": "The record does not exist"
          }
        }
      },
      "delete": {
        "summary": "Remove queue item",
        "tags": [
          "/v1/bib/bulk/"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Queue item identifier",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "200": {
            "description": "Queue item removal report",
            "schema": {
              "$ref": "#/components/schemas/queueItemRemoveResponse"
            }
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation"
          },
          "404": {
            "description": "The record does not exist"
          }
        }
      }
    },
    "/v1/bib/bulk/{id}": {
      "get": {
        "summary": "Retrieve queue item content",
        "tags": [
          "/v1/bib/bulk/"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Queue item identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "200": {
            "description": "Queue item content"
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation"
          },
          "404": {
            "description": "Queue item does not exist"
          }
        }
      },
      "delete": {
        "summary": "Remove queue item content",
        "tags": [
          "/v1/bib/bulk/"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Queue item identifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "httpBasic": []
          }
        ],
        "responses": {
          "204": {
            "description": "Queue item content removed"
          },
          "401": {
            "description": "Credentials are invalid or missing"
          },
          "403": {
            "description": "The credentials are not authorized for this operation"
          },
          "404": {
            "description": "Queue item does not exist"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "httpBasic": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "recordDuplicateReport": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "000001234"
        ]
      },
      "recordValidationReport": {
        "type": "array",
        "items": {
          "type": "json"
        },
        "example": [
          {
            "description": "Check whether the configured fields have valid structure",
            "state": "invalid"
          }
        ]
      },
      "queueItemRemoveResponse": {
        "type": "object",
        "properties": {
          "request": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          "result": {
            "type": "boolean"
          }
        },
        "example": {
          "request": {
            "id": "00000000-0000-0000-0000-00000000000"
          },
          "result": "true"
        }
      },
      "marcRecord": {
        "type": "object",
        "properties": {
          "leader": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "required": true,
            "items": {
              "type": "object",
              "properties": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "type": "string",
                        "required": true
                      },
                      "value": {
                        "type": "string",
                        "required": true
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "type": "string",
                        "required": true
                      },
                      "subfields": {
                        "type": "array",
                        "required": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "required": true
                            },
                            "value": {
                              "type": "string",
                              "required": true
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "example": {
          "leader": "",
          "fields": [
            {
              "tag": "001",
              "value": "000000001"
            },
            {
              "tag": "100",
              "ind1": " ",
              "Ind2": " ",
              "subfields": [
                {
                  "code": "a",
                  "value": "foo, faa"
                }
              ]
            }
          ]
        }
      },
      "dbQueueItem-bulk": {
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "The identifier of the queue item"
          },
          "cataloger": {
            "type": "string",
            "description": "The identifier of cataloger"
          },
          "operation": {
            "type": "string",
            "description": "The request operation type",
            "enum": [
              "CREATE",
              "UPDATE"
            ]
          },
          "contentType": {
            "type": "string",
            "description": "Input stream mime type",
            "enum": [
              "application/alephseq",
              "application/json",
              "application/xml",
              "application/marc"
            ]
          },
          "queueItemState": {
            "type": "string",
            "description": "The request queue item state",
            "enum": [
              "DONE",
              "ERROR",
              "IN_PROCESS",
              "IN_QUEUE",
              "PENDING_QUEUING",
              "QUEUING_IN_PROGRESS",
              "UPLOADING"
            ]
          },
          "creationTime": {
            "type": "string",
            "description": "The request creation time"
          },
          "modificationTime": {
            "type": "string",
            "description": "Last modification time of the request"
          },
          "handledIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Handled record id"
            }
          }
        }
      },
      "dbQueueItem-prio": {
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "The identifier of the queue item"
          },
          "cataloger": {
            "type": "string",
            "description": "The identifier of cataloger"
          },
          "operation": {
            "type": "string",
            "description": "The request operation type",
            "enum": [
              "CREATE",
              "UPDATE"
            ]
          },
          "queueItemState": {
            "type": "string",
            "description": "The request queue item state",
            "enum": [
              "PENDING_VALIDATION",
              "VALIDATING",
              "VALIDATED",
              "IMPORTING",
              "DONE",
              "ERROR",
              "ABORT"
            ]
          },
          "creationTime": {
            "type": "string",
            "description": "The request creation time"
          },
          "modificationTime": {
            "type": "string",
            "description": "Last modification time of the request"
          },
          "handledId": {
            "type": "string",
            "description": "Handled record id",
            "enum": [
              "000000000",
              "",
              "undefined"
            ]
          }
        }
      }
    },
    "examples": {
      "MARCXML": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><record><leader>00000cam a22003494i 4500</leader><datafield tag=\"245\" ind1=\"0\" ind2=\" \"><subfield code=\"a\">foo</subfield></datafield></record>",
      "ISO2709": {
        "externalValue": "https://raw.githubusercontent.com/NatLibFi/melinda-rest-api/master/test-fixtures/conversion/iso2709_1"
      }
    }
  }
}